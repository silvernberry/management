name: File Format Check

on:
  pull_request:
    types: [opened, synchronize, reopened, edited, labeled, unlabeled]

jobs:
  check_changes:
    if: contains(github.event.pull_request.labels.*.name, 'Calendar proposal') || contains(github.event.pull_request.labels.*.name, 'OKR proposal')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Get label names
        id: get_labels
        run: |
          labels=$(jq -r ".pull_request.labels | length" "$GITHUB_EVENT_PATH")
          pr_labels=$(jq -r ".pull_request.labels[].name" "$GITHUB_EVENT_PATH")
          echo "Labels: $pr_labels"
          echo "::set-output name=LABELS::$pr_labels"

      - name: Determine directory based on labels
        id: determine_directory
        run: |
          label_names="${{ steps.get_labels.outputs.LABELS }}"
          if [[ "$label_names" == *"Calendar proposal"* ]]; then
            directory="calender"
          elif [[ "$label_names" == *"OKR proposal"* ]]; then
            directory="monthly_OKR"
          fi
          echo "Directory: $directory"
          echo "::set-output name=DIRECTORY::$directory"

      - name: Get changed files in pull request
        id: get_changed_files
        run: |
          directory="${{ steps.determine_directory.outputs.DIRECTORY }}"
          changed_files=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
          -X GET "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
          | jq -r --arg directory "$directory" '.[] | select(.filename | contains($directory)) | .filename')
          echo "::set-output name=CHANGED_FILES::$changed_files"

      - name: Check for Proposal Changes
        run: |
          changed_files="${{ steps.get_changed_files.outputs.CHANGED_FILES }}"
          if [ -z "$changed_files" ]; then
            echo "No changes made to the $directory directory."
            exit 1
          else
            echo "Changes detected in the $directory directory."
            current_month_year=$(date +"%m_%Y")
            while read -r file; do
              filename=$(basename "$file")
              if [[ "$filename" != "$current_month_year.md" ]]; then
                echo "File $filename format is incorrect."
                exit 1
              fi
              echo "$filename"
            done <<< "$changed_files"
          fi
